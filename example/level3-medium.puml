@startuml
skinparam rectangle {
  BackgroundColor #fdf6e3
  BorderColor Black
  RoundCorner 10
}
skinparam note {
  BackgroundColor #fefcf0
  BorderColor #999999
}

title AWS Serverless Toy App v2 (Step Functions, DLQ, S3 Tags)

' Components
rectangle "Source Bucket\n(S3)" as sourceBucket
rectangle "Event Bus\n(EventBridge)" as eventBus
rectangle "Validation Step\n(Lambda)" as validateLambda
rectangle "Transform Step\n(Lambda)" as transformLambda
rectangle "Processing State Machine\n(Step Functions)" as stepFn
rectangle "DLQ\n(SQS)" as dlq
rectangle "Processed Bucket\n(S3)" as processedBucket
rectangle "Metadata Table\n(DynamoDB)" as metadataTable
rectangle "Logs Table\n(DynamoDB)" as logsTable
rectangle "API Lambda\n(Lambda)" as apiFunction
rectangle "API Gateway\n(APIGateway)" as apiGateway
rectangle "Logger Lambda\n(Lambda)" as loggerFunction

' Lambda Notes
note right of validateLambda
  Check if uploaded file is .txt and < 1MB
  If valid, continue to transform step
  Else, fail and trigger DLQ
end note

note right of transformLambda
  Reads file content, converts it to lowercase
  Uploads to Processed Bucket with tag: processed=true
  Updates Metadata Table
end note

note right of loggerFunction
  Logs file upload event to Logs Table
end note

note right of apiFunction
  GET /files: List file metadata (GSI by file type)
  GET /files/{name}: Return pre-signed URL
end note

' Flow
sourceBucket --> eventBus : Upload Event
eventBus --> stepFn : Start processing
stepFn --> validateLambda : Step 1
stepFn --> transformLambda : Step 2
stepFn --> dlq : On failure

eventBus --> loggerFunction : Log file upload
transformLambda --> sourceBucket : Get file
transformLambda --> processedBucket : Store file (tagged)
transformLambda --> metadataTable : Store metadata

loggerFunction --> logsTable : Store log entry

apiGateway --> apiFunction : API request
apiFunction --> metadataTable : Query (GSI on filetype)
apiFunction --> processedBucket : Get file URL
@enduml